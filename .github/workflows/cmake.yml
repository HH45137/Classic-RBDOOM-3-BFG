name: CMake

on:
  push

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Retail

jobs:
  linux-build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up GCC
      uses: egor-tensin/setup-gcc@v1
      with:
        version: 11
        platform: x64
    
    - name: Download Depedencies
      run: sudo apt-get install -y libsdl2-dev libopenal-dev libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev

    - name: Configure CMake
      working-directory: ${{github.workspace}}/neo
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DSDL2=ON -DUSE_PRECOMPILED_HEADERS=OFF -DMAKE_DLL=OFF -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: linux-retail
        path: |
          ./build/Retail/DoomBFA
      
    - name: Create Test Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag-name: test
        release-name: linux-test-release
        body: |
          This is a test
        draft: true
    - name: Upload file on release
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-retail.zip
        asset_name: my-artifact.zip
        asset_content_type: application/zip
  windows-build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-version: '[17.0, 18.0)'
        msbuild-architecture: x64

    - name: Configure CMake
      working-directory: ${{github.workspace}}/neo
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -G "Visual Studio 17" -A "x64" -DOPENAL=ON -DWINRT=ON -DUSE_XAUDIO2_PACKAGE=ON -DMAKE_DLL=OFF -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: windows-retail
        path: |
          ./build/Retail/DoomBFA.exe
          ./build/d3xp/Retail/gamex64.dll
      
